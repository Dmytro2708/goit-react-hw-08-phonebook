{"version":3,"file":"static/js/845.ce7c6102.chunk.js","mappings":"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","sources":["components/Contacts/Contacts.styled.js","redux/contacts/selectors.js","components/Contacts/Contacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/NameInput/NameInput.styled.js","components/NameInput/NameInput.js","pages/ContactsPage.js"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const ContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  outline: 1px solid grey;\n  border-radius: 20px;\n  background-color: #d3d3d3;\n  padding: 10px;\n`;\n\nexport const ContactEl = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  p {\n    margin-right: 10px;\n  }\n  button {\n    width: 100px;\n    cursor: pointer;\n    background-color: orange;\n    border-radius: 5px;\n    border: none;\n    &:hover {\n        background-color: blueviolet;\n        color: #fff;\n        transform: scale(1.1);\n    }\n  }\n`;\n\n\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilterValue = state => state.filter.value;\n\nexport const selectVisibleContacts = createSelector([\n    selectContacts,\n    selectFilterValue,\n  ], (contacts, filters) => contacts.filter(item=>item.name.toLowerCase().includes(filters.toLowerCase()))\n  );","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ContactsList, ContactEl } from './Contacts.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <div>\n      {isLoading ? (\n        <p>Please, wait...</p>\n      ) : (\n        <ContactsList>\n          {filteredContacts.map(e => (\n            <ContactEl key={e.id}>\n              <p>\n                {e.name}: {e.number}\n              </p>\n              <button\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(e.id))}\n              >\n                Delete\n              </button>\n            </ContactEl>\n          ))}\n        </ContactsList>\n      )}\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\n\nexport const FilterInput = styled.input`\n  width: 300px;\n  border-radius: 20px;\n  padding: 4px;\n`;","import { FilterInput } from \"./Filter.styled\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilterValue } from \"redux/contacts/selectors\";\n\n\nexport function Filter() {\n  const dispatch = useDispatch();\n    const filter = useSelector(selectFilterValue);\n\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <FilterInput type=\"text\"  value={filter} onChange={evt => dispatch(setFilter(evt.target.value))} />\n    </>\n  );\n}","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  outline: 1px solid grey;\n  border-radius: 20px;\n  padding: 10px;\n  background-color: #d3d3d3;\n  label {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 10px;\n  }\n  input {\n    margin-top: 6px;\n    border-radius: 20px;\n  }\n  button {\n    width: 100px;\n    cursor: pointer;\n    background-color: orange;\n    border-radius: 5px;\n    border: none;\n    &:hover {\n      background-color: blueviolet;\n      color: #fff;\n      transform: scale(1.1);\n    }\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nimport { Formik, Field, ErrorMessage } from 'formik';\nimport { StyledForm } from './NameInput.styled';\nimport * as Yup from 'yup';\n\nconst NameInputSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Name is required'),\n  number: Yup.string()\n    .matches(/^\\+[1-9]\\d{1,14}$/, 'Invalid phone number format')\n    .required('Must be filled'),\n});\n\nexport const NameInput = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const addNewContact = newContact => {\n    const hasContact = contacts.some(\n      contact => contact.name === newContact.name\n    );\n\n    if (hasContact) {\n      alert('A contact with that name already exists');\n      return;\n    }\n\n    dispatch(addContact(newContact));\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={NameInputSchema}\n      onSubmit={(values, actions) => {\n        addNewContact(values);\n        actions.resetForm();\n      }}\n    >\n      <StyledForm>\n        <label>\n          Name\n          <Field type=\"text\" name=\"name\" placeholder=\" Name\" />\n          <ErrorMessage name=\"name\" />\n        </label>\n\n        <label>\n          Number\n          <Field type=\"tel\" name=\"number\" placeholder=\" + Number\" />\n          <ErrorMessage name=\"number\" />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container } from 'components/GlobalStyle';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport { NameInput } from 'components/NameInput/NameInput';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <NameInput />\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactsList","styled","_templateObject","_taggedTemplateLiteral","ContactEl","_templateObject2","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilterValue","filter","value","selectVisibleContacts","createSelector","filters","item","name","toLowerCase","includes","Contacts","dispatch","useDispatch","useSelector","filteredContacts","_jsx","children","map","e","_jsxs","number","type","onClick","deleteContact","id","FilterInput","Filter","_Fragment","onChange","evt","setFilter","target","StyledForm","Form","NameInputSchema","Yup","shape","min","required","matches","NameInput","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","some","contact","alert","addContact","resetForm","Field","placeholder","ErrorMessage","useEffect","fetchContacts","Container"],"sourceRoot":""}